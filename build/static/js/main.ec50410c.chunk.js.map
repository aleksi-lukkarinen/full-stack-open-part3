{"version":3,"sources":["conf.js","components/PageHeader.js","components/SectionHeader.js","components/NumberListLine.js","services/persons.js","components/EntryList.js","components/EntryAddingForm.js","components/Notification.js","App.js","index.js"],"names":["STR_EMPTY","SERVER_URL_PERSONS","process","REACT_APP_PHONEBOOK_SERVER_URL","MSG_DUP_ENTRY_UPDATE","PageHeader","content","SectionHeader","NumberListLine","entry","deleteHandler","name","phoneNumber","data-id","id","onClick","simplified","result","then","response","data","PersonsService","getAll","url","conf","axios","get","create","entryToAdd","post","update","entryToUpdate","put","delete","idToDelete","initialFilterState","text","filter","EntryList","title","entries","setEntries","setInfoMessage","setErrorMessage","useState","nameFilter","setNameFilter","deleteEntry","event","target","dataset","entryToDelete","find","n","msg","window","confirm","userDisagreesToDeleteEntry","setTimeout","catch","reason","finally","e","value","onChange","t","newState","trim","toUpperCase","includes","map","EntryAddingForm","newName","setNewName","newPhoneNumber","setNewPhoneNumber","showInfoMessage","showErrorMessage","onSubmit","preventDefault","trimmedName","length","ucaseName","existingEntry","replace","newEntries","concat","error","request","status","responseData","JSON","parse","errors","Array","isArray","message","endsWith","i","type","Notification","baseClass","messageVisibleClass","classes","className","App","errorMessage","infoMessage","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec50410c.chunk.js","sourcesContent":["export const TEMPLATE_MARK = \"{}\"\r\nexport const STR_EMPTY = \"\"\r\nexport const STR_KEY_VALUE_SEP = \":\"\r\n\r\nexport const SERVER_URL_BASE =\r\n        process.env.REACT_APP_PHONEBOOK_SERVER_URL || \"/api/\"\r\nexport const SERVER_URL_PERSONS = SERVER_URL_BASE + \"persons\"\r\n\r\nexport const APP_TITLE = \"Phonebook\"\r\nexport const SECTION_TITLE_NEW_ENTRY = \"Add a New Entry\"\r\nexport const SECTION_TITLE_SAVED_ENTRIES = \"Saved Entries\"\r\n\r\nexport const MSG_DUP_ENTRY_UPDATE =\r\n    \"A person with name {} has already been added to the phonebook. \" +\r\n    \"Would you like to update their information?\"\r\n\r\nexport const ERR_ADDING_EMPTY_NAME = \"An empty name cannot be added to the phonebook.\"\r\nexport const ERR_ADDING_EMPTY_PHONENUMBER = \"An empty phone number cannot be added to the phonebook.\"\r\n","const PageHeader = ({content}) => {\r\n  return <h1>{content}</h1>\r\n}\r\n\r\nexport default PageHeader\r\n","const SectionHeader = ({content}) => {\r\n  return <h2>{content}</h2>\r\n}\r\n\r\nexport default SectionHeader\r\n","import * as conf from \"../conf\"\r\n\r\nconst NumberListLine = ({entry, deleteHandler}) => {\r\n  return <div>\r\n      {entry.name}{conf.STR_KEY_VALUE_SEP} {entry.phoneNumber}\r\n      <button\r\n          data-id={entry.id}\r\n          onClick={deleteHandler}>Delete</button>\r\n    </div>\r\n}\r\n\r\nexport default NumberListLine\r\n","import axios from \"axios\"\r\nimport * as conf from \"../conf\"\r\n\r\nfunction simplified(result) {\r\n  return result.then(response => response.data)\r\n}\r\n\r\nfunction getAllEntries() {\r\n  const url = conf.SERVER_URL_PERSONS\r\n  const result = axios.get(url)\r\n  return simplified(result)\r\n}\r\n\r\nfunction createEntry(entryToAdd) {\r\n  const url = conf.SERVER_URL_PERSONS\r\n  const result = axios.post(url, entryToAdd)\r\n  return simplified(result)\r\n}\r\n\r\nfunction updateEntry(entryToUpdate) {\r\n  const url = `${conf.SERVER_URL_PERSONS}/${entryToUpdate.id}`\r\n  const result = axios.put(url, entryToUpdate)\r\n  return simplified(result)\r\n}\r\n\r\nfunction deleteEntry(idToDelete) {\r\n  const url = `${conf.SERVER_URL_PERSONS}/${idToDelete}`\r\n  const result = axios.delete(url)\r\n  return result\r\n}\r\n\r\nconst PersonsService = {\r\n  getAll: getAllEntries,\r\n  create: createEntry,\r\n  update: updateEntry,\r\n  delete: deleteEntry,\r\n}\r\n\r\nexport default PersonsService\r\n","import * as conf from \"../conf\"\r\nimport React, { useState } from \"react\"\r\nimport SectionHeader from \"./SectionHeader\"\r\nimport NumberListLine from \"./NumberListLine\"\r\nimport PersonsService from \"../services/persons\"\r\n\r\nconst initialFilterState = {\r\n  text: conf.STR_EMPTY,\r\n  filter: conf.STR_EMPTY,\r\n}\r\n\r\nfunction userDisagreesToDeleteEntry(name) {\r\n  const msg = `Do you want to delete entry called \"${name}\"?`\r\n  const agreement = window.confirm(msg)\r\n  return !agreement\r\n}\r\n\r\nconst EntryList = ({\r\n        title,\r\n        entries,\r\n        setEntries,\r\n        setInfoMessage,\r\n        setErrorMessage}) => {\r\n\r\n  const [nameFilter, setNameFilter] = useState(initialFilterState)\r\n\r\n  function deleteEntry(event) {\r\n    const idToDelete = event.target.dataset.id\r\n    const entryToDelete = entries.find(n => n.id === idToDelete)\r\n\r\n    if (userDisagreesToDeleteEntry(entryToDelete.name))\r\n      return\r\n\r\n    PersonsService\r\n      .delete(idToDelete)\r\n      .then(() => {\r\n        const msg = `Entry \"${entryToDelete.name}\" was successfully deleted.`\r\n        setInfoMessage(msg)\r\n        setTimeout(() => setInfoMessage(null), 5000)\r\n      })\r\n      .catch(reason => {\r\n        let msg = `Unable to delete entry ${idToDelete} (${entryToDelete.name}) from the server. ` +\r\n          \"Maybe it was deleted earlier or did never exist.\"\r\n        setErrorMessage(msg)\r\n        setTimeout(() => setErrorMessage(null), 5000)\r\n      })\r\n      .finally(setEntries(entries.filter(e => e.id !== idToDelete)))\r\n  }\r\n\r\n  function updateNameFilter(event) {\r\n    const t = event.target.value\r\n    const newState = {\r\n      text: t,\r\n      filter: t.trim().toUpperCase()\r\n    }\r\n\r\n    setNameFilter(newState)\r\n  }\r\n\r\n  const entryFilterFunc = e =>\r\n    e.name.toUpperCase().includes(nameFilter.filter)\r\n\r\n  return (\r\n    <>\r\n      <SectionHeader content={title} />\r\n      <div>\r\n        Filter with:\r\n        <input\r\n            value={nameFilter.text}\r\n            onChange={updateNameFilter} />\r\n      </div>\r\n      {entries.filter(entryFilterFunc)\r\n        .map(e =>\r\n          <NumberListLine\r\n              entry={e} key={e.id}\r\n              deleteHandler={deleteEntry} />\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EntryList\r\n","import * as conf from \"../conf\"\r\nimport React, {useState} from 'react'\r\nimport SectionHeader from \"./SectionHeader\"\r\nimport PersonsService from \"../services/persons\"\r\n\r\nconst EntryAddingForm = ({\r\n        title,\r\n        entries,\r\n        setEntries,\r\n        setInfoMessage,\r\n        setErrorMessage}) => {\r\n\r\n  const [newName, setNewName] = useState(conf.STR_EMPTY)\r\n  const [newPhoneNumber, setNewPhoneNumber] = useState(conf.STR_EMPTY)\r\n\r\n  function showInfoMessage(content) {\r\n    setInfoMessage(content)\r\n    setTimeout(() => setInfoMessage(null), 5000)\r\n  }\r\n\r\n  function showErrorMessage(content) {\r\n    setErrorMessage(content)\r\n    setTimeout(() => setErrorMessage(null), 5000)\r\n  }\r\n\r\n  function addEntry(event) {\r\n    event.preventDefault()\r\n\r\n    // Are trim() and toUpperCase() *exactly* the same\r\n    // on the client and the server? If not, this will fail\r\n    // and the existence of an entry should be queried from\r\n    // the server.\r\n\r\n    const trimmedName = newName.trim()\r\n    if (trimmedName.length < 1) {\r\n      showErrorMessage(conf.ERR_ADDING_EMPTY_NAME)\r\n    }\r\n    else {\r\n      const ucaseName = trimmedName.toUpperCase()\r\n      const testIfNameExists = e => e.name.toUpperCase() === ucaseName\r\n      const existingEntry = entries.find(testIfNameExists)\r\n      if (existingEntry) {\r\n        const msg = conf.MSG_DUP_ENTRY_UPDATE.replace(\r\n                      conf.TEMPLATE_MARK, existingEntry.name)\r\n        const userAgrees = window.confirm(msg)\r\n        if (userAgrees) {\r\n          const entryToUpdate = {\r\n            ...existingEntry,\r\n            phoneNumber: newPhoneNumber,\r\n          }\r\n          PersonsService\r\n            .update(entryToUpdate)\r\n            .then(data => {\r\n              const newEntries = entries.map(e =>\r\n                      e.id !== entryToUpdate.id ? e : data)\r\n              setEntries(newEntries)\r\n\r\n              showInfoMessage(\r\n                `Entry \"${entryToUpdate.name}\" was successfully updated.`)\r\n            })\r\n        }\r\n      }\r\n      else {\r\n        const entryToAdd = {\r\n          name: newName,\r\n          phoneNumber: newPhoneNumber,\r\n        }\r\n\r\n        PersonsService\r\n          .create(entryToAdd)\r\n          .then(data => {\r\n            setEntries(entries.concat(data))\r\n\r\n            showInfoMessage(\r\n              `Entry \"${entryToAdd.name}\" was successfully added.`)\r\n          })\r\n          .catch(error => {\r\n            let msg = `Adding entry ${entryToAdd.name} failed`\r\n\r\n            try {\r\n              if (error.request.status === 400) {\r\n                const responseData =\r\n                          JSON.parse(error.request.response)\r\n                if (responseData.errors &&\r\n                      Array.isArray(responseData.errors)) {\r\n                  msg += \" for the following reason\"\r\n                  if (responseData.errors.length === 1) {\r\n                    msg += \": \" + responseData.errors[0].message\r\n                    if (!msg.endsWith(\".\"))\r\n                      msg += \".\"\r\n                  }\r\n                  else {\r\n                    msg += \"s:\"\r\n                    for (let i=0; i<responseData.errors.length; i++) {\r\n                      msg += ` (${i + 1}) ` + responseData.errors[i].message\r\n                      if (!msg.endsWith(\".\"))\r\n                        msg += \".\"\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            catch {\r\n              msg += \" for an unexpected reason\"\r\n            }\r\n\r\n            showErrorMessage(msg)\r\n          })\r\n      }\r\n    }\r\n    clearFields()\r\n  }\r\n\r\n  function clearFields() {\r\n    setNewName(conf.STR_EMPTY)\r\n    setNewPhoneNumber(conf.STR_EMPTY)\r\n  }\r\n\r\n  const updateName = (event) =>\r\n    setNewName(event.target.value)\r\n\r\n  const updatePhoneNumber = (event) =>\r\n    setNewPhoneNumber(event.target.value)\r\n\r\n  return (\r\n    <>\r\n      <SectionHeader content={title} />\r\n      <form onSubmit={addEntry}>\r\n        <div>\r\n          Name: <input value={newName} onChange={updateName} />\r\n        </div>\r\n        <div>\r\n          Number: <input value={newPhoneNumber} onChange={updatePhoneNumber} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EntryAddingForm\r\n","const Notification = ({ content, baseClass, messageVisibleClass }) => {\r\n  if (content === null)\r\n    content = \"\"\r\n\r\n  let classes = baseClass\r\n  if (content !== null && content.length > 0)\r\n    classes += \" \" + messageVisibleClass\r\n\r\n  return <div className={classes}>{content}</div>\r\n}\r\n\r\nexport default Notification\r\n","import * as conf from \"./conf\"\nimport React, { useState, useEffect } from \"react\"\nimport PageHeader from \"./components/PageHeader\"\nimport EntryList from \"./components/EntryList\"\nimport EntryAddingForm from \"./components/EntryAddingForm\"\nimport PersonsService from \"./services/persons\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const [entries, setEntries] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [infoMessage, setInfoMessage] = useState(null)\n\n  const loadDB = () => {\n    PersonsService.getAll().then(data => setEntries(data))\n  }\n  useEffect(loadDB, [])\n\n  return (\n    <>\n      <PageHeader content={conf.APP_TITLE} />\n\n      <EntryAddingForm\n        title={conf.SECTION_TITLE_NEW_ENTRY}\n        entries={entries}\n        setEntries={setEntries}\n        setInfoMessage={setInfoMessage}\n        setErrorMessage={setErrorMessage} />\n\n      <Notification\n        content={errorMessage}\n        baseClass={\"notificationBox\"}\n        messageVisibleClass={\"errorVisible\"} />\n\n      <Notification\n        content={infoMessage}\n        baseClass={\"notificationBox\"}\n        messageVisibleClass={\"infoVisible\"} />\n\n      <EntryList\n        title={conf.SECTION_TITLE_SAVED_ENTRIES}\n        entries={entries}\n        setEntries={setEntries}\n        setInfoMessage={setInfoMessage}\n        setErrorMessage={setErrorMessage} />\n    </>\n  )\n\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}