{"version":3,"sources":["conf.js","components/PageHeader.js","components/SectionHeader.js","components/NumberListLine.js","services/persons.js","components/EntryList.js","components/EntryAddingForm.js","components/Notification.js","App.js","index.js"],"names":["STR_EMPTY","SERVER_URL_PERSONS","process","REACT_APP_PHONEBOOK_SERVER_URL","MSG_DUP_ENTRY_UPDATE","PageHeader","content","SectionHeader","NumberListLine","entry","deleteHandler","name","phoneNumber","data-id","id","onClick","simplified","result","then","response","data","PersonsService","getAll","url","conf","axios","get","create","entryToAdd","post","update","entryToUpdate","put","delete","idToDelete","initialFilterState","text","filter","EntryList","title","entries","setEntries","setInfoMessage","setErrorMessage","useState","nameFilter","setNameFilter","deleteEntry","event","Number","target","dataset","entryToDelete","find","n","msg","window","confirm","userDisagreesToDeleteEntry","setTimeout","catch","reason","finally","e","value","onChange","t","newState","trim","toUpperCase","includes","map","EntryAddingForm","newName","setNewName","newPhoneNumber","setNewPhoneNumber","onSubmit","preventDefault","trimmedName","length","ucaseName","trimmedPhoneNumber","existingEntry","replace","newEntries","concat","type","Notification","baseClass","messageVisibleClass","classes","className","App","errorMessage","infoMessage","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14c098e5.chunk.js","sourcesContent":["export const TEMPLATE_MARK = \"{}\"\r\nexport const STR_EMPTY = \"\"\r\nexport const STR_KEY_VALUE_SEP = \":\"\r\n\r\nexport const SERVER_URL_BASE =\r\n        process.env.REACT_APP_PHONEBOOK_SERVER_URL ||\r\n        \"http://localhost:3001/api/\"\r\nexport const SERVER_URL_PERSONS = SERVER_URL_BASE + \"persons\"\r\n\r\nexport const APP_TITLE = \"Phonebook\"\r\nexport const SECTION_TITLE_NEW_ENTRY = \"Add a New Entry\"\r\nexport const SECTION_TITLE_SAVED_ENTRIES = \"Saved Entries\"\r\n\r\nexport const MSG_DUP_ENTRY_UPDATE =\r\n    \"A person with name {} has already been added to the phonebook. \" +\r\n    \"Would you like to update their information?\"\r\n\r\nexport const ERR_ADDING_EMPTY_NAME = \"An empty name cannot be added to the phonebook.\"\r\nexport const ERR_ADDING_EMPTY_PHONENUMBER = \"An empty phone number cannot be added to the phonebook.\"\r\n","const PageHeader = ({content}) => {\r\n  return <h1>{content}</h1>\r\n}\r\n\r\nexport default PageHeader\r\n","const SectionHeader = ({content}) => {\r\n  return <h2>{content}</h2>\r\n}\r\n\r\nexport default SectionHeader\r\n","import * as conf from \"../conf\"\r\n\r\nconst NumberListLine = ({entry, deleteHandler}) => {\r\n  return <div>\r\n      {entry.name}{conf.STR_KEY_VALUE_SEP} {entry.phoneNumber}\r\n      <button\r\n          data-id={entry.id}\r\n          onClick={deleteHandler}>Delete</button>\r\n    </div>\r\n}\r\n\r\nexport default NumberListLine\r\n","import axios from \"axios\"\r\nimport * as conf from \"../conf\"\r\n\r\nfunction simplified(result) {\r\n  return result.then(response => response.data)\r\n}\r\n\r\nfunction getAllEntries() {\r\n  const url = conf.SERVER_URL_PERSONS\r\n  const result = axios.get(url)\r\n  return simplified(result)\r\n}\r\n\r\nfunction createEntry(entryToAdd) {\r\n  const url = conf.SERVER_URL_PERSONS\r\n  const result = axios.post(url, entryToAdd)\r\n  return simplified(result)\r\n}\r\n\r\nfunction updateEntry(entryToUpdate) {\r\n  const url = `${conf.SERVER_URL_PERSONS}/${entryToUpdate.id}`\r\n  const result = axios.put(url, entryToUpdate)\r\n  return simplified(result)\r\n}\r\n\r\nfunction deleteEntry(idToDelete) {\r\n  const url = `${conf.SERVER_URL_PERSONS}/${idToDelete}`\r\n  const result = axios.delete(url)\r\n  return result\r\n}\r\n\r\nconst PersonsService = {\r\n  getAll: getAllEntries,\r\n  create: createEntry,\r\n  update: updateEntry,\r\n  delete: deleteEntry,\r\n}\r\n\r\nexport default PersonsService\r\n","import * as conf from \"../conf\"\r\nimport React, { useState } from \"react\"\r\nimport SectionHeader from \"./SectionHeader\"\r\nimport NumberListLine from \"./NumberListLine\"\r\nimport PersonsService from \"../services/persons\"\r\n\r\nconst initialFilterState = {\r\n  text: conf.STR_EMPTY,\r\n  filter: conf.STR_EMPTY,\r\n}\r\n\r\nfunction userDisagreesToDeleteEntry(name) {\r\n  const msg = `Do you want to delete entry called \"${name}\"?`\r\n  const agreement = window.confirm(msg)\r\n  return !agreement\r\n}\r\n\r\nconst EntryList = ({\r\n        title,\r\n        entries,\r\n        setEntries,\r\n        setInfoMessage,\r\n        setErrorMessage}) => {\r\n\r\n  const [nameFilter, setNameFilter] = useState(initialFilterState)\r\n\r\n  function deleteEntry(event) {\r\n    const idToDelete = Number(event.target.dataset.id)\r\n    const entryToDelete = entries.find(n => n.id === idToDelete)\r\n\r\n    if (userDisagreesToDeleteEntry(entryToDelete.name))\r\n      return\r\n\r\n    PersonsService\r\n      .delete(idToDelete)\r\n      .then(() => {\r\n        const msg = `Entry \"${entryToDelete.name}\" was successfully deleted.`\r\n        setInfoMessage(msg)\r\n        setTimeout(() => setInfoMessage(null), 5000)\r\n      })\r\n      .catch(reason => {\r\n        let msg = `Unable to delete entry ${idToDelete} (${entryToDelete.name}) from the server. ` +\r\n          \"Maybe it was deleted earlier or did never exist.\"\r\n        setErrorMessage(msg)\r\n        setTimeout(() => setErrorMessage(null), 5000)\r\n      })\r\n      .finally(setEntries(entries.filter(e => e.id !== idToDelete)))\r\n  }\r\n\r\n  function updateNameFilter(event) {\r\n    const t = event.target.value\r\n    const newState = {\r\n      text: t,\r\n      filter: t.trim().toUpperCase()\r\n    }\r\n\r\n    setNameFilter(newState)\r\n  }\r\n\r\n  const entryFilterFunc = e =>\r\n    e.name.toUpperCase().includes(nameFilter.filter)\r\n\r\n  return (\r\n    <>\r\n      <SectionHeader content={title} />\r\n      <div>\r\n        Filter with:\r\n        <input\r\n            value={nameFilter.text}\r\n            onChange={updateNameFilter} />\r\n      </div>\r\n      {entries.filter(entryFilterFunc)\r\n        .map(e =>\r\n          <NumberListLine\r\n              entry={e} key={e.id}\r\n              deleteHandler={deleteEntry} />\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EntryList\r\n","import * as conf from \"../conf\"\r\nimport React, {useState} from 'react'\r\nimport SectionHeader from \"./SectionHeader\"\r\nimport PersonsService from \"../services/persons\"\r\n\r\nconst EntryAddingForm = ({\r\n        title,\r\n        entries,\r\n        setEntries,\r\n        setInfoMessage,\r\n        setErrorMessage}) => {\r\n\r\n  const [newName, setNewName] = useState(conf.STR_EMPTY)\r\n  const [newPhoneNumber, setNewPhoneNumber] = useState(conf.STR_EMPTY)\r\n\r\n  function addEntry(event) {\r\n    event.preventDefault()\r\n\r\n    const trimmedName = newName.trim()\r\n    if (trimmedName.length < 1) {\r\n      const errMsg = conf.ERR_ADDING_EMPTY_NAME\r\n      setErrorMessage(errMsg)\r\n      setTimeout(() => setErrorMessage(null), 5000)\r\n    }\r\n    else {\r\n      const ucaseName = trimmedName.toUpperCase()\r\n      const testIfNameExists = e => e.name.toUpperCase() === ucaseName\r\n\r\n      const trimmedPhoneNumber = newPhoneNumber.trim()\r\n      if (trimmedPhoneNumber.length < 1) {\r\n        const errMsg = conf.ERR_ADDING_EMPTY_PHONENUMBER\r\n        setErrorMessage(errMsg)\r\n        setTimeout(() => setErrorMessage(null), 5000)\r\n      }\r\n      else {\r\n        const existingEntry = entries.find(testIfNameExists)\r\n        if (existingEntry) {\r\n          const msg = conf.MSG_DUP_ENTRY_UPDATE.replace(\r\n            conf.TEMPLATE_MARK, existingEntry.name)\r\n          const userAgrees = window.confirm(msg)\r\n          if (userAgrees) {\r\n            const entryToUpdate = {\r\n              ...existingEntry,\r\n              phoneNumber: trimmedPhoneNumber,\r\n            }\r\n            PersonsService\r\n              .update(entryToUpdate)\r\n              .then(data => {\r\n                const newEntries = entries.map(e =>\r\n                        e.id !== entryToUpdate.id ? e : data)\r\n                setEntries(newEntries)\r\n\r\n                const msg = `Entry \"${entryToUpdate.name}\" was successfully updated.`\r\n                setInfoMessage(msg)\r\n                setTimeout(() => setInfoMessage(null), 5000)\r\n              })\r\n          }\r\n        }\r\n        else {\r\n          const entryToAdd = {\r\n            name: trimmedName,\r\n            phoneNumber: trimmedPhoneNumber,\r\n          }\r\n\r\n          PersonsService\r\n            .create(entryToAdd)\r\n            .then(data => {\r\n              setEntries(entries.concat(data))\r\n\r\n              const msg = `Entry \"${entryToAdd.name}\" was successfully added.`\r\n              setInfoMessage(msg)\r\n              setTimeout(() => setInfoMessage(null), 5000)\r\n            })\r\n        }\r\n      }\r\n    }\r\n    clearFields()\r\n  }\r\n\r\n  function clearFields() {\r\n    setNewName(conf.STR_EMPTY)\r\n    setNewPhoneNumber(conf.STR_EMPTY)\r\n  }\r\n\r\n  const updateName = (event) =>\r\n    setNewName(event.target.value)\r\n\r\n  const updatePhoneNumber = (event) =>\r\n    setNewPhoneNumber(event.target.value)\r\n\r\n  return (\r\n    <>\r\n      <SectionHeader content={title} />\r\n      <form onSubmit={addEntry}>\r\n        <div>\r\n          Name: <input value={newName} onChange={updateName} />\r\n        </div>\r\n        <div>\r\n          Number: <input value={newPhoneNumber} onChange={updatePhoneNumber} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EntryAddingForm\r\n","const Notification = ({ content, baseClass, messageVisibleClass }) => {\r\n  if (content === null)\r\n    content = \"\"\r\n\r\n  let classes = baseClass\r\n  if (content !== null && content.length > 0)\r\n    classes += \" \" + messageVisibleClass\r\n\r\n  return <div className={classes}>{content}</div>\r\n}\r\n\r\nexport default Notification\r\n","import * as conf from \"./conf\"\nimport React, { useState, useEffect } from \"react\"\nimport PageHeader from \"./components/PageHeader\"\nimport EntryList from \"./components/EntryList\"\nimport EntryAddingForm from \"./components/EntryAddingForm\"\nimport PersonsService from \"./services/persons\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const [entries, setEntries] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [infoMessage, setInfoMessage] = useState(null)\n\n  const loadDB = () => {\n    PersonsService.getAll().then(data => setEntries(data))\n  }\n  useEffect(loadDB, [])\n\n  return (\n    <>\n      <PageHeader content={conf.APP_TITLE} />\n\n      <EntryAddingForm\n        title={conf.SECTION_TITLE_NEW_ENTRY}\n        entries={entries}\n        setEntries={setEntries}\n        setInfoMessage={setInfoMessage}\n        setErrorMessage={setErrorMessage} />\n\n      <Notification\n        content={errorMessage}\n        baseClass={\"notificationBox\"}\n        messageVisibleClass={\"errorVisible\"} />\n\n      <Notification\n        content={infoMessage}\n        baseClass={\"notificationBox\"}\n        messageVisibleClass={\"infoVisible\"} />\n\n      <EntryList\n        title={conf.SECTION_TITLE_SAVED_ENTRIES}\n        entries={entries}\n        setEntries={setEntries}\n        setInfoMessage={setInfoMessage}\n        setErrorMessage={setErrorMessage} />\n    </>\n  )\n\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}